#!/usr/bin/python
import numpy as np
import PyKDL
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from baxter_kdl.kdl_parser import kdl_tree_from_urdf_model
from urdf_parser_py.urdf import URDF

#record_trajectory_path is a traj from baxter; dmp_trajectory_path is a traj generated by dmp code
record_trajectory_path = '/home/tony/ros/indigo/baxter_ws/src/birl_baxter/birl_baxter_dmp/dmp/pick_place_data/go_back_position.txt'
dmp_trajectory_path ='/home/tony/ros/indigo/baxter_ws/src/birl_baxter/birl_baxter_dmp/dmp/pick_place_data/go_back_position_dmp.txt'

train_set = pd.read_csv(record_trajectory_path) #get data by pandas
train_len = len(train_set) # the lengh of data
resample_t = np.linspace(train_set.values[0,0],train_set.values[-1,0],train_len)  #rearrange the data
joint0_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,9])
joint1_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,10])
joint2_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,11])
joint3_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,12])
joint4_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,13])
joint5_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,14])
joint6_data = np.interp(resample_t, train_set.values[:,0], train_set.values[:,15])

train_set_dmp = pd.read_csv(dmp_trajectory_path)
train_len_dmp = len(train_set_dmp)
resample_t_dmp = np.linspace(train_set_dmp.values[0,0],train_set_dmp.values[-1,0],train_len_dmp)
joint0_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,1])
joint1_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,2])
joint2_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,3])
joint3_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,4])
joint4_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,5])
joint5_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,6])
joint6_data_dmp = np.interp(resample_t, train_set_dmp.values[:,0], train_set_dmp.values[:,7])



end_frame = PyKDL.Frame()
end_frame_dmp = PyKDL.Frame()
baxter = URDF.from_parameter_server(key='robot_description')
base_link = baxter.get_root()
limb = "right"
tip_link = limb + '_gripper'
kdl_tree = kdl_tree_from_urdf_model(baxter)
arm_chain = kdl_tree.getChain(base_link,tip_link)
fk_p_kdl = PyKDL.ChainFkSolverPos_recursive(arm_chain)
Jnt_list = PyKDL.JntArray(7)
Jnt_list_dmp = PyKDL.JntArray(7)
pose = []
pose_dmp = []
for i in range(train_len):
    Jnt_list[0] = joint0_data[i]
    Jnt_list[1] = joint1_data[i]
    Jnt_list[2] = joint2_data[i]
    Jnt_list[3] = joint3_data[i]
    Jnt_list[4] = joint4_data[i]
    Jnt_list[5] = joint5_data[i]
    Jnt_list[6] = joint6_data[i]
    fk_p_kdl.JntToCart(Jnt_list,end_frame)
    pos = end_frame.p
    rot = PyKDL.Rotation(end_frame.M)
    rot = rot.GetQuaternion()
    pose.append(np.array([pos[0], pos[1], pos[2],
                         rot[0], rot[1], rot[2], rot[3]]))

xs = []
ys = []
zs = []
for j in range(train_len):
    position_x = pose[j][0]
    position_y = pose[j][1]
    position_z = pose[j][2]
    xs.append(position_x)
    ys.append(position_y)
    zs.append(position_z)

for i in range(train_len):
    Jnt_list_dmp[0] = joint0_data_dmp[i]
    Jnt_list_dmp[1] = joint1_data_dmp[i]
    Jnt_list_dmp[2] = joint2_data_dmp[i]
    Jnt_list_dmp[3] = joint3_data_dmp[i]
    Jnt_list_dmp[4] = joint4_data_dmp[i]
    Jnt_list_dmp[5] = joint5_data_dmp[i]
    Jnt_list_dmp[6] = joint6_data_dmp[i]
    fk_p_kdl.JntToCart(Jnt_list_dmp,end_frame_dmp)
    pos_dmp = end_frame_dmp.p
    rot_dmp = PyKDL.Rotation(end_frame_dmp.M)
    rot_dmp = rot_dmp.GetQuaternion()
    pose_dmp.append(np.array([pos_dmp[0], pos_dmp[1], pos_dmp[2],
                              rot_dmp[0], rot_dmp[1], rot_dmp[2], rot_dmp[3]]))

xs_dmp = []
ys_dmp = []
zs_dmp = []
for j in range(train_len):
    position_x_dmp = pose_dmp[j][0]
    position_y_dmp = pose_dmp[j][1]
    position_z_dmp = pose_dmp[j][2]
    xs_dmp.append(position_x_dmp)
    ys_dmp.append(position_y_dmp)
    zs_dmp.append(position_z_dmp)

fig=plt.figure()
ax = Axes3D(fig)
plt.xlabel('X')
plt.ylabel('Y')
# plot traj fig
ax.plot(xs, ys, zs, linewidth=4, alpha=0.3)
# Plot plan fig
ax.plot(xs_dmp, ys_dmp, zs_dmp, "--")
# Plot plan fig

# show the plot
plt.draw()
plt.show()
